// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GameSpec.proto

#include "GameSpec.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace GameSpec {
class BagItemDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BagItem>
      _instance;
} _BagItem_default_instance_;
class EquipItemDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EquipItem>
      _instance;
} _EquipItem_default_instance_;
class CurrencyItemDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CurrencyItem>
      _instance;
} _CurrencyItem_default_instance_;
class BagInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BagInfo>
      _instance;
} _BagInfo_default_instance_;
class PlayersDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Players>
      _instance;
} _Players_default_instance_;
class AddItemReqDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AddItemReq>
      _instance;
} _AddItemReq_default_instance_;
class AddItemRspDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AddItemRsp>
      _instance;
} _AddItemRsp_default_instance_;
class CtlMsgLoginReqDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CtlMsgLoginReq>
      _instance;
} _CtlMsgLoginReq_default_instance_;
class CtlMsgLoginRspDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CtlMsgLoginRsp>
      _instance;
} _CtlMsgLoginRsp_default_instance_;
class CtlMsgSearchReqDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CtlMsgSearchReq>
      _instance;
} _CtlMsgSearchReq_default_instance_;
class CtlMsgSearchRspDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CtlMsgSearchRsp>
      _instance;
} _CtlMsgSearchRsp_default_instance_;
class RemoveItemReqDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RemoveItemReq>
      _instance;
} _RemoveItemReq_default_instance_;
class RemoveItemRspDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RemoveItemRsp>
      _instance;
} _RemoveItemRsp_default_instance_;
class RankReqDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RankReq>
      _instance;
} _RankReq_default_instance_;
class RankRspDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RankRsp>
      _instance;
} _RankRsp_default_instance_;
}  // namespace GameSpec
namespace protobuf_GameSpec_2eproto {
void InitDefaultsBagItemImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::GameSpec::_BagItem_default_instance_;
    new (ptr) ::GameSpec::BagItem();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameSpec::BagItem::InitAsDefaultInstance();
}

void InitDefaultsBagItem() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsBagItemImpl);
}

void InitDefaultsEquipItemImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::GameSpec::_EquipItem_default_instance_;
    new (ptr) ::GameSpec::EquipItem();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameSpec::EquipItem::InitAsDefaultInstance();
}

void InitDefaultsEquipItem() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsEquipItemImpl);
}

void InitDefaultsCurrencyItemImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::GameSpec::_CurrencyItem_default_instance_;
    new (ptr) ::GameSpec::CurrencyItem();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameSpec::CurrencyItem::InitAsDefaultInstance();
}

void InitDefaultsCurrencyItem() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCurrencyItemImpl);
}

void InitDefaultsBagInfoImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_GameSpec_2eproto::InitDefaultsBagItem();
  protobuf_GameSpec_2eproto::InitDefaultsEquipItem();
  protobuf_GameSpec_2eproto::InitDefaultsCurrencyItem();
  {
    void* ptr = &::GameSpec::_BagInfo_default_instance_;
    new (ptr) ::GameSpec::BagInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameSpec::BagInfo::InitAsDefaultInstance();
}

void InitDefaultsBagInfo() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsBagInfoImpl);
}

void InitDefaultsPlayersImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_GameSpec_2eproto::InitDefaultsBagInfo();
  {
    void* ptr = &::GameSpec::_Players_default_instance_;
    new (ptr) ::GameSpec::Players();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameSpec::Players::InitAsDefaultInstance();
}

void InitDefaultsPlayers() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPlayersImpl);
}

void InitDefaultsAddItemReqImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::GameSpec::_AddItemReq_default_instance_;
    new (ptr) ::GameSpec::AddItemReq();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameSpec::AddItemReq::InitAsDefaultInstance();
}

void InitDefaultsAddItemReq() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsAddItemReqImpl);
}

void InitDefaultsAddItemRspImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::GameSpec::_AddItemRsp_default_instance_;
    new (ptr) ::GameSpec::AddItemRsp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameSpec::AddItemRsp::InitAsDefaultInstance();
}

void InitDefaultsAddItemRsp() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsAddItemRspImpl);
}

void InitDefaultsCtlMsgLoginReqImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::GameSpec::_CtlMsgLoginReq_default_instance_;
    new (ptr) ::GameSpec::CtlMsgLoginReq();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameSpec::CtlMsgLoginReq::InitAsDefaultInstance();
}

void InitDefaultsCtlMsgLoginReq() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCtlMsgLoginReqImpl);
}

void InitDefaultsCtlMsgLoginRspImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_GameSpec_2eproto::InitDefaultsPlayers();
  {
    void* ptr = &::GameSpec::_CtlMsgLoginRsp_default_instance_;
    new (ptr) ::GameSpec::CtlMsgLoginRsp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameSpec::CtlMsgLoginRsp::InitAsDefaultInstance();
}

void InitDefaultsCtlMsgLoginRsp() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCtlMsgLoginRspImpl);
}

void InitDefaultsCtlMsgSearchReqImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::GameSpec::_CtlMsgSearchReq_default_instance_;
    new (ptr) ::GameSpec::CtlMsgSearchReq();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameSpec::CtlMsgSearchReq::InitAsDefaultInstance();
}

void InitDefaultsCtlMsgSearchReq() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCtlMsgSearchReqImpl);
}

void InitDefaultsCtlMsgSearchRspImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_GameSpec_2eproto::InitDefaultsPlayers();
  {
    void* ptr = &::GameSpec::_CtlMsgSearchRsp_default_instance_;
    new (ptr) ::GameSpec::CtlMsgSearchRsp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameSpec::CtlMsgSearchRsp::InitAsDefaultInstance();
}

void InitDefaultsCtlMsgSearchRsp() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCtlMsgSearchRspImpl);
}

void InitDefaultsRemoveItemReqImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::GameSpec::_RemoveItemReq_default_instance_;
    new (ptr) ::GameSpec::RemoveItemReq();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameSpec::RemoveItemReq::InitAsDefaultInstance();
}

void InitDefaultsRemoveItemReq() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRemoveItemReqImpl);
}

void InitDefaultsRemoveItemRspImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::GameSpec::_RemoveItemRsp_default_instance_;
    new (ptr) ::GameSpec::RemoveItemRsp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameSpec::RemoveItemRsp::InitAsDefaultInstance();
}

void InitDefaultsRemoveItemRsp() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRemoveItemRspImpl);
}

void InitDefaultsRankReqImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::GameSpec::_RankReq_default_instance_;
    new (ptr) ::GameSpec::RankReq();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameSpec::RankReq::InitAsDefaultInstance();
}

void InitDefaultsRankReq() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRankReqImpl);
}

void InitDefaultsRankRspImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::GameSpec::_RankRsp_default_instance_;
    new (ptr) ::GameSpec::RankRsp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameSpec::RankRsp::InitAsDefaultInstance();
}

void InitDefaultsRankRsp() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRankRspImpl);
}

::google::protobuf::Metadata file_level_metadata[15];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameSpec::BagItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameSpec::BagItem, itemid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameSpec::BagItem, typeid__),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameSpec::BagItem, count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameSpec::BagItem, overly_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameSpec::BagItem, binded_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameSpec::EquipItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameSpec::EquipItem, itemid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameSpec::EquipItem, typeid__),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameSpec::EquipItem, count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameSpec::EquipItem, overly_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameSpec::EquipItem, binded_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameSpec::EquipItem, attack_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameSpec::EquipItem, durability_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameSpec::CurrencyItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameSpec::CurrencyItem, itemid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameSpec::CurrencyItem, typeid__),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameSpec::CurrencyItem, count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameSpec::CurrencyItem, overly_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameSpec::BagInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameSpec::BagInfo, bag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameSpec::BagInfo, equipment_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameSpec::BagInfo, currency_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameSpec::Players, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameSpec::Players, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameSpec::Players, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameSpec::Players, rank_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameSpec::Players, exp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameSpec::Players, bags_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameSpec::AddItemReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameSpec::AddItemReq, itemid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameSpec::AddItemReq, count_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameSpec::AddItemRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameSpec::AddItemRsp, errcode_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameSpec::CtlMsgLoginReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameSpec::CtlMsgLoginReq, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameSpec::CtlMsgLoginReq, password_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameSpec::CtlMsgLoginRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameSpec::CtlMsgLoginRsp, errcode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameSpec::CtlMsgLoginRsp, player_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameSpec::CtlMsgSearchReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameSpec::CtlMsgSearchReq, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameSpec::CtlMsgSearchReq, name_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameSpec::CtlMsgSearchRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameSpec::CtlMsgSearchRsp, errcode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameSpec::CtlMsgSearchRsp, player_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameSpec::RemoveItemReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameSpec::RemoveItemReq, itemid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameSpec::RemoveItemReq, count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameSpec::RemoveItemReq, pos_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameSpec::RemoveItemRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameSpec::RemoveItemRsp, errcode_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameSpec::RankReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameSpec::RankReq, start_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameSpec::RankReq, end_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameSpec::RankRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameSpec::RankRsp, errcode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameSpec::RankRsp, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameSpec::RankRsp, exp_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::GameSpec::BagItem)},
  { 10, -1, sizeof(::GameSpec::EquipItem)},
  { 22, -1, sizeof(::GameSpec::CurrencyItem)},
  { 31, -1, sizeof(::GameSpec::BagInfo)},
  { 39, -1, sizeof(::GameSpec::Players)},
  { 49, -1, sizeof(::GameSpec::AddItemReq)},
  { 56, -1, sizeof(::GameSpec::AddItemRsp)},
  { 62, -1, sizeof(::GameSpec::CtlMsgLoginReq)},
  { 69, -1, sizeof(::GameSpec::CtlMsgLoginRsp)},
  { 76, -1, sizeof(::GameSpec::CtlMsgSearchReq)},
  { 83, -1, sizeof(::GameSpec::CtlMsgSearchRsp)},
  { 90, -1, sizeof(::GameSpec::RemoveItemReq)},
  { 98, -1, sizeof(::GameSpec::RemoveItemRsp)},
  { 104, -1, sizeof(::GameSpec::RankReq)},
  { 111, -1, sizeof(::GameSpec::RankRsp)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameSpec::_BagItem_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameSpec::_EquipItem_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameSpec::_CurrencyItem_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameSpec::_BagInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameSpec::_Players_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameSpec::_AddItemReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameSpec::_AddItemRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameSpec::_CtlMsgLoginReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameSpec::_CtlMsgLoginRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameSpec::_CtlMsgSearchReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameSpec::_CtlMsgSearchRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameSpec::_RemoveItemReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameSpec::_RemoveItemRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameSpec::_RankReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameSpec::_RankRsp_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "GameSpec.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 15);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\016GameSpec.proto\022\010GameSpec\"X\n\007BagItem\022\016\n"
      "\006itemID\030\001 \001(\005\022\016\n\006typeID\030\002 \001(\005\022\r\n\005count\030\003"
      " \001(\005\022\016\n\006overly\030\004 \001(\005\022\016\n\006binded\030\005 \001(\010\"~\n\t"
      "EquipItem\022\016\n\006itemID\030\001 \001(\005\022\016\n\006typeID\030\002 \001("
      "\005\022\r\n\005count\030\003 \001(\005\022\016\n\006overly\030\004 \001(\005\022\016\n\006bind"
      "ed\030\005 \001(\010\022\016\n\006attack\030\006 \001(\005\022\022\n\ndurability\030\007"
      " \001(\005\"M\n\014CurrencyItem\022\016\n\006itemID\030\001 \001(\005\022\016\n\006"
      "typeID\030\002 \001(\005\022\r\n\005count\030\003 \001(\005\022\016\n\006overly\030\004 "
      "\001(\005\"{\n\007BagInfo\022\036\n\003bag\030\001 \003(\0132\021.GameSpec.B"
      "agItem\022&\n\tequipment\030\002 \003(\0132\023.GameSpec.Equ"
      "ipItem\022(\n\010currency\030\003 \003(\0132\026.GameSpec.Curr"
      "encyItem\"_\n\007Players\022\n\n\002id\030\001 \001(\005\022\014\n\004name\030"
      "\002 \001(\t\022\014\n\004rank\030\003 \001(\005\022\013\n\003exp\030\004 \001(\005\022\037\n\004bags"
      "\030\005 \001(\0132\021.GameSpec.BagInfo\"+\n\nAddItemReq\022"
      "\016\n\006itemID\030\001 \001(\005\022\r\n\005count\030\002 \001(\005\"2\n\nAddIte"
      "mRsp\022$\n\007errCode\030\001 \001(\0162\023.GameSpec.ErrorCo"
      "de\"0\n\016CtlMsgLoginReq\022\014\n\004Name\030\001 \001(\t\022\020\n\010pa"
      "ssword\030\002 \001(\t\"Y\n\016CtlMsgLoginRsp\022$\n\007errCod"
      "e\030\001 \001(\0162\023.GameSpec.ErrorCode\022!\n\006player\030\002"
      " \001(\0132\021.GameSpec.Players\"+\n\017CtlMsgSearchR"
      "eq\022\n\n\002id\030\001 \001(\005\022\014\n\004Name\030\002 \001(\t\"Z\n\017CtlMsgSe"
      "archRsp\022$\n\007errCode\030\001 \001(\0162\023.GameSpec.Erro"
      "rCode\022!\n\006player\030\002 \001(\0132\021.GameSpec.Players"
      "\";\n\rRemoveItemReq\022\016\n\006itemID\030\001 \001(\005\022\r\n\005cou"
      "nt\030\002 \001(\005\022\013\n\003pos\030\003 \001(\005\"5\n\rRemoveItemRsp\022$"
      "\n\007errCode\030\001 \001(\0162\023.GameSpec.ErrorCode\"%\n\007"
      "RankReq\022\r\n\005start\030\001 \001(\005\022\013\n\003end\030\002 \001(\005\"J\n\007R"
      "ankRsp\022$\n\007errCode\030\001 \001(\0162\023.GameSpec.Error"
      "Code\022\014\n\004name\030\002 \003(\t\022\013\n\003exp\030\003 \003(\005*\225\001\n\tErro"
      "rCode\022\022\n\016ERROR_NO_ERROR\020\000\022\023\n\017ERROR_AUH_E"
      "RROR\020\001\022\025\n\021ERROR_SEARCH_FAIL\020\002\022\027\n\023ERROR_R"
      "EV_ITEM_FAIL\020\003\022\027\n\023ERROR_ADD_ITEM_FAIL\020\004\022"
      "\026\n\022ERROR_PARSE_FAILED\020\005b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1311);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "GameSpec.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_GameSpec_2eproto
namespace GameSpec {
const ::google::protobuf::EnumDescriptor* ErrorCode_descriptor() {
  protobuf_GameSpec_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_GameSpec_2eproto::file_level_enum_descriptors[0];
}
bool ErrorCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void BagItem::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BagItem::kItemIDFieldNumber;
const int BagItem::kTypeIDFieldNumber;
const int BagItem::kCountFieldNumber;
const int BagItem::kOverlyFieldNumber;
const int BagItem::kBindedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BagItem::BagItem()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_GameSpec_2eproto::InitDefaultsBagItem();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameSpec.BagItem)
}
BagItem::BagItem(const BagItem& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&itemid_, &from.itemid_,
    static_cast<size_t>(reinterpret_cast<char*>(&binded_) -
    reinterpret_cast<char*>(&itemid_)) + sizeof(binded_));
  // @@protoc_insertion_point(copy_constructor:GameSpec.BagItem)
}

void BagItem::SharedCtor() {
  ::memset(&itemid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&binded_) -
      reinterpret_cast<char*>(&itemid_)) + sizeof(binded_));
  _cached_size_ = 0;
}

BagItem::~BagItem() {
  // @@protoc_insertion_point(destructor:GameSpec.BagItem)
  SharedDtor();
}

void BagItem::SharedDtor() {
}

void BagItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BagItem::descriptor() {
  ::protobuf_GameSpec_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_GameSpec_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BagItem& BagItem::default_instance() {
  ::protobuf_GameSpec_2eproto::InitDefaultsBagItem();
  return *internal_default_instance();
}

BagItem* BagItem::New(::google::protobuf::Arena* arena) const {
  BagItem* n = new BagItem;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BagItem::Clear() {
// @@protoc_insertion_point(message_clear_start:GameSpec.BagItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&itemid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&binded_) -
      reinterpret_cast<char*>(&itemid_)) + sizeof(binded_));
  _internal_metadata_.Clear();
}

bool BagItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameSpec.BagItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 itemID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 typeID = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &typeid__)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 count = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 overly = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &overly_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool binded = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &binded_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameSpec.BagItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameSpec.BagItem)
  return false;
#undef DO_
}

void BagItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameSpec.BagItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 itemID = 1;
  if (this->itemid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->itemid(), output);
  }

  // int32 typeID = 2;
  if (this->typeid_() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->typeid_(), output);
  }

  // int32 count = 3;
  if (this->count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->count(), output);
  }

  // int32 overly = 4;
  if (this->overly() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->overly(), output);
  }

  // bool binded = 5;
  if (this->binded() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->binded(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:GameSpec.BagItem)
}

::google::protobuf::uint8* BagItem::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameSpec.BagItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 itemID = 1;
  if (this->itemid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->itemid(), target);
  }

  // int32 typeID = 2;
  if (this->typeid_() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->typeid_(), target);
  }

  // int32 count = 3;
  if (this->count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->count(), target);
  }

  // int32 overly = 4;
  if (this->overly() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->overly(), target);
  }

  // bool binded = 5;
  if (this->binded() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->binded(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameSpec.BagItem)
  return target;
}

size_t BagItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameSpec.BagItem)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 itemID = 1;
  if (this->itemid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->itemid());
  }

  // int32 typeID = 2;
  if (this->typeid_() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->typeid_());
  }

  // int32 count = 3;
  if (this->count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->count());
  }

  // int32 overly = 4;
  if (this->overly() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->overly());
  }

  // bool binded = 5;
  if (this->binded() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BagItem::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameSpec.BagItem)
  GOOGLE_DCHECK_NE(&from, this);
  const BagItem* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BagItem>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameSpec.BagItem)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameSpec.BagItem)
    MergeFrom(*source);
  }
}

void BagItem::MergeFrom(const BagItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameSpec.BagItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.itemid() != 0) {
    set_itemid(from.itemid());
  }
  if (from.typeid_() != 0) {
    set_typeid_(from.typeid_());
  }
  if (from.count() != 0) {
    set_count(from.count());
  }
  if (from.overly() != 0) {
    set_overly(from.overly());
  }
  if (from.binded() != 0) {
    set_binded(from.binded());
  }
}

void BagItem::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameSpec.BagItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BagItem::CopyFrom(const BagItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameSpec.BagItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BagItem::IsInitialized() const {
  return true;
}

void BagItem::Swap(BagItem* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BagItem::InternalSwap(BagItem* other) {
  using std::swap;
  swap(itemid_, other->itemid_);
  swap(typeid__, other->typeid__);
  swap(count_, other->count_);
  swap(overly_, other->overly_);
  swap(binded_, other->binded_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BagItem::GetMetadata() const {
  protobuf_GameSpec_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_GameSpec_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void EquipItem::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EquipItem::kItemIDFieldNumber;
const int EquipItem::kTypeIDFieldNumber;
const int EquipItem::kCountFieldNumber;
const int EquipItem::kOverlyFieldNumber;
const int EquipItem::kBindedFieldNumber;
const int EquipItem::kAttackFieldNumber;
const int EquipItem::kDurabilityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EquipItem::EquipItem()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_GameSpec_2eproto::InitDefaultsEquipItem();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameSpec.EquipItem)
}
EquipItem::EquipItem(const EquipItem& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&itemid_, &from.itemid_,
    static_cast<size_t>(reinterpret_cast<char*>(&durability_) -
    reinterpret_cast<char*>(&itemid_)) + sizeof(durability_));
  // @@protoc_insertion_point(copy_constructor:GameSpec.EquipItem)
}

void EquipItem::SharedCtor() {
  ::memset(&itemid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&durability_) -
      reinterpret_cast<char*>(&itemid_)) + sizeof(durability_));
  _cached_size_ = 0;
}

EquipItem::~EquipItem() {
  // @@protoc_insertion_point(destructor:GameSpec.EquipItem)
  SharedDtor();
}

void EquipItem::SharedDtor() {
}

void EquipItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipItem::descriptor() {
  ::protobuf_GameSpec_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_GameSpec_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EquipItem& EquipItem::default_instance() {
  ::protobuf_GameSpec_2eproto::InitDefaultsEquipItem();
  return *internal_default_instance();
}

EquipItem* EquipItem::New(::google::protobuf::Arena* arena) const {
  EquipItem* n = new EquipItem;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EquipItem::Clear() {
// @@protoc_insertion_point(message_clear_start:GameSpec.EquipItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&itemid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&durability_) -
      reinterpret_cast<char*>(&itemid_)) + sizeof(durability_));
  _internal_metadata_.Clear();
}

bool EquipItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameSpec.EquipItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 itemID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 typeID = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &typeid__)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 count = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 overly = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &overly_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool binded = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &binded_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 attack = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attack_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 durability = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &durability_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameSpec.EquipItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameSpec.EquipItem)
  return false;
#undef DO_
}

void EquipItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameSpec.EquipItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 itemID = 1;
  if (this->itemid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->itemid(), output);
  }

  // int32 typeID = 2;
  if (this->typeid_() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->typeid_(), output);
  }

  // int32 count = 3;
  if (this->count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->count(), output);
  }

  // int32 overly = 4;
  if (this->overly() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->overly(), output);
  }

  // bool binded = 5;
  if (this->binded() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->binded(), output);
  }

  // int32 attack = 6;
  if (this->attack() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->attack(), output);
  }

  // int32 durability = 7;
  if (this->durability() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->durability(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:GameSpec.EquipItem)
}

::google::protobuf::uint8* EquipItem::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameSpec.EquipItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 itemID = 1;
  if (this->itemid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->itemid(), target);
  }

  // int32 typeID = 2;
  if (this->typeid_() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->typeid_(), target);
  }

  // int32 count = 3;
  if (this->count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->count(), target);
  }

  // int32 overly = 4;
  if (this->overly() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->overly(), target);
  }

  // bool binded = 5;
  if (this->binded() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->binded(), target);
  }

  // int32 attack = 6;
  if (this->attack() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->attack(), target);
  }

  // int32 durability = 7;
  if (this->durability() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->durability(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameSpec.EquipItem)
  return target;
}

size_t EquipItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameSpec.EquipItem)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 itemID = 1;
  if (this->itemid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->itemid());
  }

  // int32 typeID = 2;
  if (this->typeid_() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->typeid_());
  }

  // int32 count = 3;
  if (this->count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->count());
  }

  // int32 overly = 4;
  if (this->overly() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->overly());
  }

  // bool binded = 5;
  if (this->binded() != 0) {
    total_size += 1 + 1;
  }

  // int32 attack = 6;
  if (this->attack() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->attack());
  }

  // int32 durability = 7;
  if (this->durability() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->durability());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipItem::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameSpec.EquipItem)
  GOOGLE_DCHECK_NE(&from, this);
  const EquipItem* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EquipItem>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameSpec.EquipItem)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameSpec.EquipItem)
    MergeFrom(*source);
  }
}

void EquipItem::MergeFrom(const EquipItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameSpec.EquipItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.itemid() != 0) {
    set_itemid(from.itemid());
  }
  if (from.typeid_() != 0) {
    set_typeid_(from.typeid_());
  }
  if (from.count() != 0) {
    set_count(from.count());
  }
  if (from.overly() != 0) {
    set_overly(from.overly());
  }
  if (from.binded() != 0) {
    set_binded(from.binded());
  }
  if (from.attack() != 0) {
    set_attack(from.attack());
  }
  if (from.durability() != 0) {
    set_durability(from.durability());
  }
}

void EquipItem::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameSpec.EquipItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipItem::CopyFrom(const EquipItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameSpec.EquipItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipItem::IsInitialized() const {
  return true;
}

void EquipItem::Swap(EquipItem* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EquipItem::InternalSwap(EquipItem* other) {
  using std::swap;
  swap(itemid_, other->itemid_);
  swap(typeid__, other->typeid__);
  swap(count_, other->count_);
  swap(overly_, other->overly_);
  swap(binded_, other->binded_);
  swap(attack_, other->attack_);
  swap(durability_, other->durability_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EquipItem::GetMetadata() const {
  protobuf_GameSpec_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_GameSpec_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CurrencyItem::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CurrencyItem::kItemIDFieldNumber;
const int CurrencyItem::kTypeIDFieldNumber;
const int CurrencyItem::kCountFieldNumber;
const int CurrencyItem::kOverlyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CurrencyItem::CurrencyItem()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_GameSpec_2eproto::InitDefaultsCurrencyItem();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameSpec.CurrencyItem)
}
CurrencyItem::CurrencyItem(const CurrencyItem& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&itemid_, &from.itemid_,
    static_cast<size_t>(reinterpret_cast<char*>(&overly_) -
    reinterpret_cast<char*>(&itemid_)) + sizeof(overly_));
  // @@protoc_insertion_point(copy_constructor:GameSpec.CurrencyItem)
}

void CurrencyItem::SharedCtor() {
  ::memset(&itemid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&overly_) -
      reinterpret_cast<char*>(&itemid_)) + sizeof(overly_));
  _cached_size_ = 0;
}

CurrencyItem::~CurrencyItem() {
  // @@protoc_insertion_point(destructor:GameSpec.CurrencyItem)
  SharedDtor();
}

void CurrencyItem::SharedDtor() {
}

void CurrencyItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CurrencyItem::descriptor() {
  ::protobuf_GameSpec_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_GameSpec_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CurrencyItem& CurrencyItem::default_instance() {
  ::protobuf_GameSpec_2eproto::InitDefaultsCurrencyItem();
  return *internal_default_instance();
}

CurrencyItem* CurrencyItem::New(::google::protobuf::Arena* arena) const {
  CurrencyItem* n = new CurrencyItem;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CurrencyItem::Clear() {
// @@protoc_insertion_point(message_clear_start:GameSpec.CurrencyItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&itemid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&overly_) -
      reinterpret_cast<char*>(&itemid_)) + sizeof(overly_));
  _internal_metadata_.Clear();
}

bool CurrencyItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameSpec.CurrencyItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 itemID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 typeID = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &typeid__)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 count = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 overly = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &overly_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameSpec.CurrencyItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameSpec.CurrencyItem)
  return false;
#undef DO_
}

void CurrencyItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameSpec.CurrencyItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 itemID = 1;
  if (this->itemid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->itemid(), output);
  }

  // int32 typeID = 2;
  if (this->typeid_() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->typeid_(), output);
  }

  // int32 count = 3;
  if (this->count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->count(), output);
  }

  // int32 overly = 4;
  if (this->overly() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->overly(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:GameSpec.CurrencyItem)
}

::google::protobuf::uint8* CurrencyItem::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameSpec.CurrencyItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 itemID = 1;
  if (this->itemid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->itemid(), target);
  }

  // int32 typeID = 2;
  if (this->typeid_() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->typeid_(), target);
  }

  // int32 count = 3;
  if (this->count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->count(), target);
  }

  // int32 overly = 4;
  if (this->overly() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->overly(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameSpec.CurrencyItem)
  return target;
}

size_t CurrencyItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameSpec.CurrencyItem)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 itemID = 1;
  if (this->itemid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->itemid());
  }

  // int32 typeID = 2;
  if (this->typeid_() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->typeid_());
  }

  // int32 count = 3;
  if (this->count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->count());
  }

  // int32 overly = 4;
  if (this->overly() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->overly());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CurrencyItem::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameSpec.CurrencyItem)
  GOOGLE_DCHECK_NE(&from, this);
  const CurrencyItem* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CurrencyItem>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameSpec.CurrencyItem)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameSpec.CurrencyItem)
    MergeFrom(*source);
  }
}

void CurrencyItem::MergeFrom(const CurrencyItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameSpec.CurrencyItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.itemid() != 0) {
    set_itemid(from.itemid());
  }
  if (from.typeid_() != 0) {
    set_typeid_(from.typeid_());
  }
  if (from.count() != 0) {
    set_count(from.count());
  }
  if (from.overly() != 0) {
    set_overly(from.overly());
  }
}

void CurrencyItem::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameSpec.CurrencyItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CurrencyItem::CopyFrom(const CurrencyItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameSpec.CurrencyItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CurrencyItem::IsInitialized() const {
  return true;
}

void CurrencyItem::Swap(CurrencyItem* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CurrencyItem::InternalSwap(CurrencyItem* other) {
  using std::swap;
  swap(itemid_, other->itemid_);
  swap(typeid__, other->typeid__);
  swap(count_, other->count_);
  swap(overly_, other->overly_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CurrencyItem::GetMetadata() const {
  protobuf_GameSpec_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_GameSpec_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void BagInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BagInfo::kBagFieldNumber;
const int BagInfo::kEquipmentFieldNumber;
const int BagInfo::kCurrencyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BagInfo::BagInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_GameSpec_2eproto::InitDefaultsBagInfo();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameSpec.BagInfo)
}
BagInfo::BagInfo(const BagInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      bag_(from.bag_),
      equipment_(from.equipment_),
      currency_(from.currency_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:GameSpec.BagInfo)
}

void BagInfo::SharedCtor() {
  _cached_size_ = 0;
}

BagInfo::~BagInfo() {
  // @@protoc_insertion_point(destructor:GameSpec.BagInfo)
  SharedDtor();
}

void BagInfo::SharedDtor() {
}

void BagInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BagInfo::descriptor() {
  ::protobuf_GameSpec_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_GameSpec_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BagInfo& BagInfo::default_instance() {
  ::protobuf_GameSpec_2eproto::InitDefaultsBagInfo();
  return *internal_default_instance();
}

BagInfo* BagInfo::New(::google::protobuf::Arena* arena) const {
  BagInfo* n = new BagInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BagInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:GameSpec.BagInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bag_.Clear();
  equipment_.Clear();
  currency_.Clear();
  _internal_metadata_.Clear();
}

bool BagInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameSpec.BagInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .GameSpec.BagItem bag = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_bag()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .GameSpec.EquipItem equipment = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_equipment()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .GameSpec.CurrencyItem currency = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_currency()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameSpec.BagInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameSpec.BagInfo)
  return false;
#undef DO_
}

void BagInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameSpec.BagInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .GameSpec.BagItem bag = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->bag_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->bag(static_cast<int>(i)), output);
  }

  // repeated .GameSpec.EquipItem equipment = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->equipment_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->equipment(static_cast<int>(i)), output);
  }

  // repeated .GameSpec.CurrencyItem currency = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->currency_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->currency(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:GameSpec.BagInfo)
}

::google::protobuf::uint8* BagInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameSpec.BagInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .GameSpec.BagItem bag = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->bag_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->bag(static_cast<int>(i)), deterministic, target);
  }

  // repeated .GameSpec.EquipItem equipment = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->equipment_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->equipment(static_cast<int>(i)), deterministic, target);
  }

  // repeated .GameSpec.CurrencyItem currency = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->currency_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->currency(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameSpec.BagInfo)
  return target;
}

size_t BagInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameSpec.BagInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .GameSpec.BagItem bag = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->bag_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->bag(static_cast<int>(i)));
    }
  }

  // repeated .GameSpec.EquipItem equipment = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->equipment_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->equipment(static_cast<int>(i)));
    }
  }

  // repeated .GameSpec.CurrencyItem currency = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->currency_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->currency(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BagInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameSpec.BagInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const BagInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BagInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameSpec.BagInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameSpec.BagInfo)
    MergeFrom(*source);
  }
}

void BagInfo::MergeFrom(const BagInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameSpec.BagInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  bag_.MergeFrom(from.bag_);
  equipment_.MergeFrom(from.equipment_);
  currency_.MergeFrom(from.currency_);
}

void BagInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameSpec.BagInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BagInfo::CopyFrom(const BagInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameSpec.BagInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BagInfo::IsInitialized() const {
  return true;
}

void BagInfo::Swap(BagInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BagInfo::InternalSwap(BagInfo* other) {
  using std::swap;
  bag_.InternalSwap(&other->bag_);
  equipment_.InternalSwap(&other->equipment_);
  currency_.InternalSwap(&other->currency_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BagInfo::GetMetadata() const {
  protobuf_GameSpec_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_GameSpec_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Players::InitAsDefaultInstance() {
  ::GameSpec::_Players_default_instance_._instance.get_mutable()->bags_ = const_cast< ::GameSpec::BagInfo*>(
      ::GameSpec::BagInfo::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Players::kIdFieldNumber;
const int Players::kNameFieldNumber;
const int Players::kRankFieldNumber;
const int Players::kExpFieldNumber;
const int Players::kBagsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Players::Players()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_GameSpec_2eproto::InitDefaultsPlayers();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameSpec.Players)
}
Players::Players(const Players& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_bags()) {
    bags_ = new ::GameSpec::BagInfo(*from.bags_);
  } else {
    bags_ = NULL;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&exp_) -
    reinterpret_cast<char*>(&id_)) + sizeof(exp_));
  // @@protoc_insertion_point(copy_constructor:GameSpec.Players)
}

void Players::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&bags_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&exp_) -
      reinterpret_cast<char*>(&bags_)) + sizeof(exp_));
  _cached_size_ = 0;
}

Players::~Players() {
  // @@protoc_insertion_point(destructor:GameSpec.Players)
  SharedDtor();
}

void Players::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete bags_;
}

void Players::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Players::descriptor() {
  ::protobuf_GameSpec_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_GameSpec_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Players& Players::default_instance() {
  ::protobuf_GameSpec_2eproto::InitDefaultsPlayers();
  return *internal_default_instance();
}

Players* Players::New(::google::protobuf::Arena* arena) const {
  Players* n = new Players;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Players::Clear() {
// @@protoc_insertion_point(message_clear_start:GameSpec.Players)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && bags_ != NULL) {
    delete bags_;
  }
  bags_ = NULL;
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&exp_) -
      reinterpret_cast<char*>(&id_)) + sizeof(exp_));
  _internal_metadata_.Clear();
}

bool Players::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameSpec.Players)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "GameSpec.Players.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 rank = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 exp = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .GameSpec.BagInfo bags = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_bags()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameSpec.Players)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameSpec.Players)
  return false;
#undef DO_
}

void Players::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameSpec.Players)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "GameSpec.Players.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // int32 rank = 3;
  if (this->rank() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->rank(), output);
  }

  // int32 exp = 4;
  if (this->exp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->exp(), output);
  }

  // .GameSpec.BagInfo bags = 5;
  if (this->has_bags()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->bags_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:GameSpec.Players)
}

::google::protobuf::uint8* Players::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameSpec.Players)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "GameSpec.Players.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // int32 rank = 3;
  if (this->rank() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->rank(), target);
  }

  // int32 exp = 4;
  if (this->exp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->exp(), target);
  }

  // .GameSpec.BagInfo bags = 5;
  if (this->has_bags()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, *this->bags_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameSpec.Players)
  return target;
}

size_t Players::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameSpec.Players)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // .GameSpec.BagInfo bags = 5;
  if (this->has_bags()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->bags_);
  }

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  // int32 rank = 3;
  if (this->rank() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->rank());
  }

  // int32 exp = 4;
  if (this->exp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->exp());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Players::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameSpec.Players)
  GOOGLE_DCHECK_NE(&from, this);
  const Players* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Players>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameSpec.Players)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameSpec.Players)
    MergeFrom(*source);
  }
}

void Players::MergeFrom(const Players& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameSpec.Players)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_bags()) {
    mutable_bags()->::GameSpec::BagInfo::MergeFrom(from.bags());
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.rank() != 0) {
    set_rank(from.rank());
  }
  if (from.exp() != 0) {
    set_exp(from.exp());
  }
}

void Players::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameSpec.Players)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Players::CopyFrom(const Players& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameSpec.Players)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Players::IsInitialized() const {
  return true;
}

void Players::Swap(Players* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Players::InternalSwap(Players* other) {
  using std::swap;
  name_.Swap(&other->name_);
  swap(bags_, other->bags_);
  swap(id_, other->id_);
  swap(rank_, other->rank_);
  swap(exp_, other->exp_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Players::GetMetadata() const {
  protobuf_GameSpec_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_GameSpec_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AddItemReq::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AddItemReq::kItemIDFieldNumber;
const int AddItemReq::kCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AddItemReq::AddItemReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_GameSpec_2eproto::InitDefaultsAddItemReq();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameSpec.AddItemReq)
}
AddItemReq::AddItemReq(const AddItemReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&itemid_, &from.itemid_,
    static_cast<size_t>(reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&itemid_)) + sizeof(count_));
  // @@protoc_insertion_point(copy_constructor:GameSpec.AddItemReq)
}

void AddItemReq::SharedCtor() {
  ::memset(&itemid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&itemid_)) + sizeof(count_));
  _cached_size_ = 0;
}

AddItemReq::~AddItemReq() {
  // @@protoc_insertion_point(destructor:GameSpec.AddItemReq)
  SharedDtor();
}

void AddItemReq::SharedDtor() {
}

void AddItemReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddItemReq::descriptor() {
  ::protobuf_GameSpec_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_GameSpec_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AddItemReq& AddItemReq::default_instance() {
  ::protobuf_GameSpec_2eproto::InitDefaultsAddItemReq();
  return *internal_default_instance();
}

AddItemReq* AddItemReq::New(::google::protobuf::Arena* arena) const {
  AddItemReq* n = new AddItemReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AddItemReq::Clear() {
// @@protoc_insertion_point(message_clear_start:GameSpec.AddItemReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&itemid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&itemid_)) + sizeof(count_));
  _internal_metadata_.Clear();
}

bool AddItemReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameSpec.AddItemReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 itemID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 count = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameSpec.AddItemReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameSpec.AddItemReq)
  return false;
#undef DO_
}

void AddItemReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameSpec.AddItemReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 itemID = 1;
  if (this->itemid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->itemid(), output);
  }

  // int32 count = 2;
  if (this->count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->count(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:GameSpec.AddItemReq)
}

::google::protobuf::uint8* AddItemReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameSpec.AddItemReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 itemID = 1;
  if (this->itemid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->itemid(), target);
  }

  // int32 count = 2;
  if (this->count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->count(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameSpec.AddItemReq)
  return target;
}

size_t AddItemReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameSpec.AddItemReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 itemID = 1;
  if (this->itemid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->itemid());
  }

  // int32 count = 2;
  if (this->count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->count());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddItemReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameSpec.AddItemReq)
  GOOGLE_DCHECK_NE(&from, this);
  const AddItemReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AddItemReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameSpec.AddItemReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameSpec.AddItemReq)
    MergeFrom(*source);
  }
}

void AddItemReq::MergeFrom(const AddItemReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameSpec.AddItemReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.itemid() != 0) {
    set_itemid(from.itemid());
  }
  if (from.count() != 0) {
    set_count(from.count());
  }
}

void AddItemReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameSpec.AddItemReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddItemReq::CopyFrom(const AddItemReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameSpec.AddItemReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddItemReq::IsInitialized() const {
  return true;
}

void AddItemReq::Swap(AddItemReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AddItemReq::InternalSwap(AddItemReq* other) {
  using std::swap;
  swap(itemid_, other->itemid_);
  swap(count_, other->count_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AddItemReq::GetMetadata() const {
  protobuf_GameSpec_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_GameSpec_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AddItemRsp::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AddItemRsp::kErrCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AddItemRsp::AddItemRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_GameSpec_2eproto::InitDefaultsAddItemRsp();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameSpec.AddItemRsp)
}
AddItemRsp::AddItemRsp(const AddItemRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  errcode_ = from.errcode_;
  // @@protoc_insertion_point(copy_constructor:GameSpec.AddItemRsp)
}

void AddItemRsp::SharedCtor() {
  errcode_ = 0;
  _cached_size_ = 0;
}

AddItemRsp::~AddItemRsp() {
  // @@protoc_insertion_point(destructor:GameSpec.AddItemRsp)
  SharedDtor();
}

void AddItemRsp::SharedDtor() {
}

void AddItemRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddItemRsp::descriptor() {
  ::protobuf_GameSpec_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_GameSpec_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AddItemRsp& AddItemRsp::default_instance() {
  ::protobuf_GameSpec_2eproto::InitDefaultsAddItemRsp();
  return *internal_default_instance();
}

AddItemRsp* AddItemRsp::New(::google::protobuf::Arena* arena) const {
  AddItemRsp* n = new AddItemRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AddItemRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:GameSpec.AddItemRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  errcode_ = 0;
  _internal_metadata_.Clear();
}

bool AddItemRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameSpec.AddItemRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .GameSpec.ErrorCode errCode = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_errcode(static_cast< ::GameSpec::ErrorCode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameSpec.AddItemRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameSpec.AddItemRsp)
  return false;
#undef DO_
}

void AddItemRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameSpec.AddItemRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .GameSpec.ErrorCode errCode = 1;
  if (this->errcode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->errcode(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:GameSpec.AddItemRsp)
}

::google::protobuf::uint8* AddItemRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameSpec.AddItemRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .GameSpec.ErrorCode errCode = 1;
  if (this->errcode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->errcode(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameSpec.AddItemRsp)
  return target;
}

size_t AddItemRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameSpec.AddItemRsp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .GameSpec.ErrorCode errCode = 1;
  if (this->errcode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->errcode());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddItemRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameSpec.AddItemRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const AddItemRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AddItemRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameSpec.AddItemRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameSpec.AddItemRsp)
    MergeFrom(*source);
  }
}

void AddItemRsp::MergeFrom(const AddItemRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameSpec.AddItemRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.errcode() != 0) {
    set_errcode(from.errcode());
  }
}

void AddItemRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameSpec.AddItemRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddItemRsp::CopyFrom(const AddItemRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameSpec.AddItemRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddItemRsp::IsInitialized() const {
  return true;
}

void AddItemRsp::Swap(AddItemRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AddItemRsp::InternalSwap(AddItemRsp* other) {
  using std::swap;
  swap(errcode_, other->errcode_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AddItemRsp::GetMetadata() const {
  protobuf_GameSpec_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_GameSpec_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CtlMsgLoginReq::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CtlMsgLoginReq::kNameFieldNumber;
const int CtlMsgLoginReq::kPasswordFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CtlMsgLoginReq::CtlMsgLoginReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_GameSpec_2eproto::InitDefaultsCtlMsgLoginReq();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameSpec.CtlMsgLoginReq)
}
CtlMsgLoginReq::CtlMsgLoginReq(const CtlMsgLoginReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.password().size() > 0) {
    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  // @@protoc_insertion_point(copy_constructor:GameSpec.CtlMsgLoginReq)
}

void CtlMsgLoginReq::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

CtlMsgLoginReq::~CtlMsgLoginReq() {
  // @@protoc_insertion_point(destructor:GameSpec.CtlMsgLoginReq)
  SharedDtor();
}

void CtlMsgLoginReq::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CtlMsgLoginReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CtlMsgLoginReq::descriptor() {
  ::protobuf_GameSpec_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_GameSpec_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CtlMsgLoginReq& CtlMsgLoginReq::default_instance() {
  ::protobuf_GameSpec_2eproto::InitDefaultsCtlMsgLoginReq();
  return *internal_default_instance();
}

CtlMsgLoginReq* CtlMsgLoginReq::New(::google::protobuf::Arena* arena) const {
  CtlMsgLoginReq* n = new CtlMsgLoginReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CtlMsgLoginReq::Clear() {
// @@protoc_insertion_point(message_clear_start:GameSpec.CtlMsgLoginReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool CtlMsgLoginReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameSpec.CtlMsgLoginReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string Name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "GameSpec.CtlMsgLoginReq.Name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string password = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->password().data(), static_cast<int>(this->password().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "GameSpec.CtlMsgLoginReq.password"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameSpec.CtlMsgLoginReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameSpec.CtlMsgLoginReq)
  return false;
#undef DO_
}

void CtlMsgLoginReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameSpec.CtlMsgLoginReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string Name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "GameSpec.CtlMsgLoginReq.Name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // string password = 2;
  if (this->password().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->password().data(), static_cast<int>(this->password().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "GameSpec.CtlMsgLoginReq.password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->password(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:GameSpec.CtlMsgLoginReq)
}

::google::protobuf::uint8* CtlMsgLoginReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameSpec.CtlMsgLoginReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string Name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "GameSpec.CtlMsgLoginReq.Name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // string password = 2;
  if (this->password().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->password().data(), static_cast<int>(this->password().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "GameSpec.CtlMsgLoginReq.password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->password(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameSpec.CtlMsgLoginReq)
  return target;
}

size_t CtlMsgLoginReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameSpec.CtlMsgLoginReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string Name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string password = 2;
  if (this->password().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->password());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CtlMsgLoginReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameSpec.CtlMsgLoginReq)
  GOOGLE_DCHECK_NE(&from, this);
  const CtlMsgLoginReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CtlMsgLoginReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameSpec.CtlMsgLoginReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameSpec.CtlMsgLoginReq)
    MergeFrom(*source);
  }
}

void CtlMsgLoginReq::MergeFrom(const CtlMsgLoginReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameSpec.CtlMsgLoginReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.password().size() > 0) {

    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
}

void CtlMsgLoginReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameSpec.CtlMsgLoginReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CtlMsgLoginReq::CopyFrom(const CtlMsgLoginReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameSpec.CtlMsgLoginReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CtlMsgLoginReq::IsInitialized() const {
  return true;
}

void CtlMsgLoginReq::Swap(CtlMsgLoginReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CtlMsgLoginReq::InternalSwap(CtlMsgLoginReq* other) {
  using std::swap;
  name_.Swap(&other->name_);
  password_.Swap(&other->password_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CtlMsgLoginReq::GetMetadata() const {
  protobuf_GameSpec_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_GameSpec_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CtlMsgLoginRsp::InitAsDefaultInstance() {
  ::GameSpec::_CtlMsgLoginRsp_default_instance_._instance.get_mutable()->player_ = const_cast< ::GameSpec::Players*>(
      ::GameSpec::Players::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CtlMsgLoginRsp::kErrCodeFieldNumber;
const int CtlMsgLoginRsp::kPlayerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CtlMsgLoginRsp::CtlMsgLoginRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_GameSpec_2eproto::InitDefaultsCtlMsgLoginRsp();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameSpec.CtlMsgLoginRsp)
}
CtlMsgLoginRsp::CtlMsgLoginRsp(const CtlMsgLoginRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_player()) {
    player_ = new ::GameSpec::Players(*from.player_);
  } else {
    player_ = NULL;
  }
  errcode_ = from.errcode_;
  // @@protoc_insertion_point(copy_constructor:GameSpec.CtlMsgLoginRsp)
}

void CtlMsgLoginRsp::SharedCtor() {
  ::memset(&player_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&errcode_) -
      reinterpret_cast<char*>(&player_)) + sizeof(errcode_));
  _cached_size_ = 0;
}

CtlMsgLoginRsp::~CtlMsgLoginRsp() {
  // @@protoc_insertion_point(destructor:GameSpec.CtlMsgLoginRsp)
  SharedDtor();
}

void CtlMsgLoginRsp::SharedDtor() {
  if (this != internal_default_instance()) delete player_;
}

void CtlMsgLoginRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CtlMsgLoginRsp::descriptor() {
  ::protobuf_GameSpec_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_GameSpec_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CtlMsgLoginRsp& CtlMsgLoginRsp::default_instance() {
  ::protobuf_GameSpec_2eproto::InitDefaultsCtlMsgLoginRsp();
  return *internal_default_instance();
}

CtlMsgLoginRsp* CtlMsgLoginRsp::New(::google::protobuf::Arena* arena) const {
  CtlMsgLoginRsp* n = new CtlMsgLoginRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CtlMsgLoginRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:GameSpec.CtlMsgLoginRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && player_ != NULL) {
    delete player_;
  }
  player_ = NULL;
  errcode_ = 0;
  _internal_metadata_.Clear();
}

bool CtlMsgLoginRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameSpec.CtlMsgLoginRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .GameSpec.ErrorCode errCode = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_errcode(static_cast< ::GameSpec::ErrorCode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .GameSpec.Players player = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_player()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameSpec.CtlMsgLoginRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameSpec.CtlMsgLoginRsp)
  return false;
#undef DO_
}

void CtlMsgLoginRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameSpec.CtlMsgLoginRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .GameSpec.ErrorCode errCode = 1;
  if (this->errcode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->errcode(), output);
  }

  // .GameSpec.Players player = 2;
  if (this->has_player()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->player_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:GameSpec.CtlMsgLoginRsp)
}

::google::protobuf::uint8* CtlMsgLoginRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameSpec.CtlMsgLoginRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .GameSpec.ErrorCode errCode = 1;
  if (this->errcode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->errcode(), target);
  }

  // .GameSpec.Players player = 2;
  if (this->has_player()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->player_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameSpec.CtlMsgLoginRsp)
  return target;
}

size_t CtlMsgLoginRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameSpec.CtlMsgLoginRsp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .GameSpec.Players player = 2;
  if (this->has_player()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->player_);
  }

  // .GameSpec.ErrorCode errCode = 1;
  if (this->errcode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->errcode());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CtlMsgLoginRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameSpec.CtlMsgLoginRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const CtlMsgLoginRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CtlMsgLoginRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameSpec.CtlMsgLoginRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameSpec.CtlMsgLoginRsp)
    MergeFrom(*source);
  }
}

void CtlMsgLoginRsp::MergeFrom(const CtlMsgLoginRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameSpec.CtlMsgLoginRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_player()) {
    mutable_player()->::GameSpec::Players::MergeFrom(from.player());
  }
  if (from.errcode() != 0) {
    set_errcode(from.errcode());
  }
}

void CtlMsgLoginRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameSpec.CtlMsgLoginRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CtlMsgLoginRsp::CopyFrom(const CtlMsgLoginRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameSpec.CtlMsgLoginRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CtlMsgLoginRsp::IsInitialized() const {
  return true;
}

void CtlMsgLoginRsp::Swap(CtlMsgLoginRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CtlMsgLoginRsp::InternalSwap(CtlMsgLoginRsp* other) {
  using std::swap;
  swap(player_, other->player_);
  swap(errcode_, other->errcode_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CtlMsgLoginRsp::GetMetadata() const {
  protobuf_GameSpec_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_GameSpec_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CtlMsgSearchReq::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CtlMsgSearchReq::kIdFieldNumber;
const int CtlMsgSearchReq::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CtlMsgSearchReq::CtlMsgSearchReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_GameSpec_2eproto::InitDefaultsCtlMsgSearchReq();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameSpec.CtlMsgSearchReq)
}
CtlMsgSearchReq::CtlMsgSearchReq(const CtlMsgSearchReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:GameSpec.CtlMsgSearchReq)
}

void CtlMsgSearchReq::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = 0;
  _cached_size_ = 0;
}

CtlMsgSearchReq::~CtlMsgSearchReq() {
  // @@protoc_insertion_point(destructor:GameSpec.CtlMsgSearchReq)
  SharedDtor();
}

void CtlMsgSearchReq::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CtlMsgSearchReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CtlMsgSearchReq::descriptor() {
  ::protobuf_GameSpec_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_GameSpec_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CtlMsgSearchReq& CtlMsgSearchReq::default_instance() {
  ::protobuf_GameSpec_2eproto::InitDefaultsCtlMsgSearchReq();
  return *internal_default_instance();
}

CtlMsgSearchReq* CtlMsgSearchReq::New(::google::protobuf::Arena* arena) const {
  CtlMsgSearchReq* n = new CtlMsgSearchReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CtlMsgSearchReq::Clear() {
// @@protoc_insertion_point(message_clear_start:GameSpec.CtlMsgSearchReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = 0;
  _internal_metadata_.Clear();
}

bool CtlMsgSearchReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameSpec.CtlMsgSearchReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string Name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "GameSpec.CtlMsgSearchReq.Name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameSpec.CtlMsgSearchReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameSpec.CtlMsgSearchReq)
  return false;
#undef DO_
}

void CtlMsgSearchReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameSpec.CtlMsgSearchReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // string Name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "GameSpec.CtlMsgSearchReq.Name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:GameSpec.CtlMsgSearchReq)
}

::google::protobuf::uint8* CtlMsgSearchReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameSpec.CtlMsgSearchReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // string Name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "GameSpec.CtlMsgSearchReq.Name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameSpec.CtlMsgSearchReq)
  return target;
}

size_t CtlMsgSearchReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameSpec.CtlMsgSearchReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string Name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CtlMsgSearchReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameSpec.CtlMsgSearchReq)
  GOOGLE_DCHECK_NE(&from, this);
  const CtlMsgSearchReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CtlMsgSearchReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameSpec.CtlMsgSearchReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameSpec.CtlMsgSearchReq)
    MergeFrom(*source);
  }
}

void CtlMsgSearchReq::MergeFrom(const CtlMsgSearchReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameSpec.CtlMsgSearchReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
}

void CtlMsgSearchReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameSpec.CtlMsgSearchReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CtlMsgSearchReq::CopyFrom(const CtlMsgSearchReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameSpec.CtlMsgSearchReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CtlMsgSearchReq::IsInitialized() const {
  return true;
}

void CtlMsgSearchReq::Swap(CtlMsgSearchReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CtlMsgSearchReq::InternalSwap(CtlMsgSearchReq* other) {
  using std::swap;
  name_.Swap(&other->name_);
  swap(id_, other->id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CtlMsgSearchReq::GetMetadata() const {
  protobuf_GameSpec_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_GameSpec_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CtlMsgSearchRsp::InitAsDefaultInstance() {
  ::GameSpec::_CtlMsgSearchRsp_default_instance_._instance.get_mutable()->player_ = const_cast< ::GameSpec::Players*>(
      ::GameSpec::Players::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CtlMsgSearchRsp::kErrCodeFieldNumber;
const int CtlMsgSearchRsp::kPlayerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CtlMsgSearchRsp::CtlMsgSearchRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_GameSpec_2eproto::InitDefaultsCtlMsgSearchRsp();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameSpec.CtlMsgSearchRsp)
}
CtlMsgSearchRsp::CtlMsgSearchRsp(const CtlMsgSearchRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_player()) {
    player_ = new ::GameSpec::Players(*from.player_);
  } else {
    player_ = NULL;
  }
  errcode_ = from.errcode_;
  // @@protoc_insertion_point(copy_constructor:GameSpec.CtlMsgSearchRsp)
}

void CtlMsgSearchRsp::SharedCtor() {
  ::memset(&player_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&errcode_) -
      reinterpret_cast<char*>(&player_)) + sizeof(errcode_));
  _cached_size_ = 0;
}

CtlMsgSearchRsp::~CtlMsgSearchRsp() {
  // @@protoc_insertion_point(destructor:GameSpec.CtlMsgSearchRsp)
  SharedDtor();
}

void CtlMsgSearchRsp::SharedDtor() {
  if (this != internal_default_instance()) delete player_;
}

void CtlMsgSearchRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CtlMsgSearchRsp::descriptor() {
  ::protobuf_GameSpec_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_GameSpec_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CtlMsgSearchRsp& CtlMsgSearchRsp::default_instance() {
  ::protobuf_GameSpec_2eproto::InitDefaultsCtlMsgSearchRsp();
  return *internal_default_instance();
}

CtlMsgSearchRsp* CtlMsgSearchRsp::New(::google::protobuf::Arena* arena) const {
  CtlMsgSearchRsp* n = new CtlMsgSearchRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CtlMsgSearchRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:GameSpec.CtlMsgSearchRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && player_ != NULL) {
    delete player_;
  }
  player_ = NULL;
  errcode_ = 0;
  _internal_metadata_.Clear();
}

bool CtlMsgSearchRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameSpec.CtlMsgSearchRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .GameSpec.ErrorCode errCode = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_errcode(static_cast< ::GameSpec::ErrorCode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .GameSpec.Players player = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_player()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameSpec.CtlMsgSearchRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameSpec.CtlMsgSearchRsp)
  return false;
#undef DO_
}

void CtlMsgSearchRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameSpec.CtlMsgSearchRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .GameSpec.ErrorCode errCode = 1;
  if (this->errcode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->errcode(), output);
  }

  // .GameSpec.Players player = 2;
  if (this->has_player()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->player_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:GameSpec.CtlMsgSearchRsp)
}

::google::protobuf::uint8* CtlMsgSearchRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameSpec.CtlMsgSearchRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .GameSpec.ErrorCode errCode = 1;
  if (this->errcode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->errcode(), target);
  }

  // .GameSpec.Players player = 2;
  if (this->has_player()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->player_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameSpec.CtlMsgSearchRsp)
  return target;
}

size_t CtlMsgSearchRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameSpec.CtlMsgSearchRsp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .GameSpec.Players player = 2;
  if (this->has_player()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->player_);
  }

  // .GameSpec.ErrorCode errCode = 1;
  if (this->errcode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->errcode());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CtlMsgSearchRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameSpec.CtlMsgSearchRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const CtlMsgSearchRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CtlMsgSearchRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameSpec.CtlMsgSearchRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameSpec.CtlMsgSearchRsp)
    MergeFrom(*source);
  }
}

void CtlMsgSearchRsp::MergeFrom(const CtlMsgSearchRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameSpec.CtlMsgSearchRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_player()) {
    mutable_player()->::GameSpec::Players::MergeFrom(from.player());
  }
  if (from.errcode() != 0) {
    set_errcode(from.errcode());
  }
}

void CtlMsgSearchRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameSpec.CtlMsgSearchRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CtlMsgSearchRsp::CopyFrom(const CtlMsgSearchRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameSpec.CtlMsgSearchRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CtlMsgSearchRsp::IsInitialized() const {
  return true;
}

void CtlMsgSearchRsp::Swap(CtlMsgSearchRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CtlMsgSearchRsp::InternalSwap(CtlMsgSearchRsp* other) {
  using std::swap;
  swap(player_, other->player_);
  swap(errcode_, other->errcode_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CtlMsgSearchRsp::GetMetadata() const {
  protobuf_GameSpec_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_GameSpec_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RemoveItemReq::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RemoveItemReq::kItemIDFieldNumber;
const int RemoveItemReq::kCountFieldNumber;
const int RemoveItemReq::kPosFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RemoveItemReq::RemoveItemReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_GameSpec_2eproto::InitDefaultsRemoveItemReq();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameSpec.RemoveItemReq)
}
RemoveItemReq::RemoveItemReq(const RemoveItemReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&itemid_, &from.itemid_,
    static_cast<size_t>(reinterpret_cast<char*>(&pos_) -
    reinterpret_cast<char*>(&itemid_)) + sizeof(pos_));
  // @@protoc_insertion_point(copy_constructor:GameSpec.RemoveItemReq)
}

void RemoveItemReq::SharedCtor() {
  ::memset(&itemid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pos_) -
      reinterpret_cast<char*>(&itemid_)) + sizeof(pos_));
  _cached_size_ = 0;
}

RemoveItemReq::~RemoveItemReq() {
  // @@protoc_insertion_point(destructor:GameSpec.RemoveItemReq)
  SharedDtor();
}

void RemoveItemReq::SharedDtor() {
}

void RemoveItemReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RemoveItemReq::descriptor() {
  ::protobuf_GameSpec_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_GameSpec_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RemoveItemReq& RemoveItemReq::default_instance() {
  ::protobuf_GameSpec_2eproto::InitDefaultsRemoveItemReq();
  return *internal_default_instance();
}

RemoveItemReq* RemoveItemReq::New(::google::protobuf::Arena* arena) const {
  RemoveItemReq* n = new RemoveItemReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RemoveItemReq::Clear() {
// @@protoc_insertion_point(message_clear_start:GameSpec.RemoveItemReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&itemid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pos_) -
      reinterpret_cast<char*>(&itemid_)) + sizeof(pos_));
  _internal_metadata_.Clear();
}

bool RemoveItemReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameSpec.RemoveItemReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 itemID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 count = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 pos = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameSpec.RemoveItemReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameSpec.RemoveItemReq)
  return false;
#undef DO_
}

void RemoveItemReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameSpec.RemoveItemReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 itemID = 1;
  if (this->itemid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->itemid(), output);
  }

  // int32 count = 2;
  if (this->count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->count(), output);
  }

  // int32 pos = 3;
  if (this->pos() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->pos(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:GameSpec.RemoveItemReq)
}

::google::protobuf::uint8* RemoveItemReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameSpec.RemoveItemReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 itemID = 1;
  if (this->itemid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->itemid(), target);
  }

  // int32 count = 2;
  if (this->count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->count(), target);
  }

  // int32 pos = 3;
  if (this->pos() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->pos(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameSpec.RemoveItemReq)
  return target;
}

size_t RemoveItemReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameSpec.RemoveItemReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 itemID = 1;
  if (this->itemid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->itemid());
  }

  // int32 count = 2;
  if (this->count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->count());
  }

  // int32 pos = 3;
  if (this->pos() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->pos());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RemoveItemReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameSpec.RemoveItemReq)
  GOOGLE_DCHECK_NE(&from, this);
  const RemoveItemReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RemoveItemReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameSpec.RemoveItemReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameSpec.RemoveItemReq)
    MergeFrom(*source);
  }
}

void RemoveItemReq::MergeFrom(const RemoveItemReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameSpec.RemoveItemReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.itemid() != 0) {
    set_itemid(from.itemid());
  }
  if (from.count() != 0) {
    set_count(from.count());
  }
  if (from.pos() != 0) {
    set_pos(from.pos());
  }
}

void RemoveItemReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameSpec.RemoveItemReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoveItemReq::CopyFrom(const RemoveItemReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameSpec.RemoveItemReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoveItemReq::IsInitialized() const {
  return true;
}

void RemoveItemReq::Swap(RemoveItemReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RemoveItemReq::InternalSwap(RemoveItemReq* other) {
  using std::swap;
  swap(itemid_, other->itemid_);
  swap(count_, other->count_);
  swap(pos_, other->pos_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RemoveItemReq::GetMetadata() const {
  protobuf_GameSpec_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_GameSpec_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RemoveItemRsp::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RemoveItemRsp::kErrCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RemoveItemRsp::RemoveItemRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_GameSpec_2eproto::InitDefaultsRemoveItemRsp();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameSpec.RemoveItemRsp)
}
RemoveItemRsp::RemoveItemRsp(const RemoveItemRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  errcode_ = from.errcode_;
  // @@protoc_insertion_point(copy_constructor:GameSpec.RemoveItemRsp)
}

void RemoveItemRsp::SharedCtor() {
  errcode_ = 0;
  _cached_size_ = 0;
}

RemoveItemRsp::~RemoveItemRsp() {
  // @@protoc_insertion_point(destructor:GameSpec.RemoveItemRsp)
  SharedDtor();
}

void RemoveItemRsp::SharedDtor() {
}

void RemoveItemRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RemoveItemRsp::descriptor() {
  ::protobuf_GameSpec_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_GameSpec_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RemoveItemRsp& RemoveItemRsp::default_instance() {
  ::protobuf_GameSpec_2eproto::InitDefaultsRemoveItemRsp();
  return *internal_default_instance();
}

RemoveItemRsp* RemoveItemRsp::New(::google::protobuf::Arena* arena) const {
  RemoveItemRsp* n = new RemoveItemRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RemoveItemRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:GameSpec.RemoveItemRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  errcode_ = 0;
  _internal_metadata_.Clear();
}

bool RemoveItemRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameSpec.RemoveItemRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .GameSpec.ErrorCode errCode = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_errcode(static_cast< ::GameSpec::ErrorCode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameSpec.RemoveItemRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameSpec.RemoveItemRsp)
  return false;
#undef DO_
}

void RemoveItemRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameSpec.RemoveItemRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .GameSpec.ErrorCode errCode = 1;
  if (this->errcode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->errcode(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:GameSpec.RemoveItemRsp)
}

::google::protobuf::uint8* RemoveItemRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameSpec.RemoveItemRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .GameSpec.ErrorCode errCode = 1;
  if (this->errcode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->errcode(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameSpec.RemoveItemRsp)
  return target;
}

size_t RemoveItemRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameSpec.RemoveItemRsp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .GameSpec.ErrorCode errCode = 1;
  if (this->errcode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->errcode());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RemoveItemRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameSpec.RemoveItemRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const RemoveItemRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RemoveItemRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameSpec.RemoveItemRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameSpec.RemoveItemRsp)
    MergeFrom(*source);
  }
}

void RemoveItemRsp::MergeFrom(const RemoveItemRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameSpec.RemoveItemRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.errcode() != 0) {
    set_errcode(from.errcode());
  }
}

void RemoveItemRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameSpec.RemoveItemRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoveItemRsp::CopyFrom(const RemoveItemRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameSpec.RemoveItemRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoveItemRsp::IsInitialized() const {
  return true;
}

void RemoveItemRsp::Swap(RemoveItemRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RemoveItemRsp::InternalSwap(RemoveItemRsp* other) {
  using std::swap;
  swap(errcode_, other->errcode_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RemoveItemRsp::GetMetadata() const {
  protobuf_GameSpec_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_GameSpec_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RankReq::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RankReq::kStartFieldNumber;
const int RankReq::kEndFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RankReq::RankReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_GameSpec_2eproto::InitDefaultsRankReq();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameSpec.RankReq)
}
RankReq::RankReq(const RankReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&start_, &from.start_,
    static_cast<size_t>(reinterpret_cast<char*>(&end_) -
    reinterpret_cast<char*>(&start_)) + sizeof(end_));
  // @@protoc_insertion_point(copy_constructor:GameSpec.RankReq)
}

void RankReq::SharedCtor() {
  ::memset(&start_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_) -
      reinterpret_cast<char*>(&start_)) + sizeof(end_));
  _cached_size_ = 0;
}

RankReq::~RankReq() {
  // @@protoc_insertion_point(destructor:GameSpec.RankReq)
  SharedDtor();
}

void RankReq::SharedDtor() {
}

void RankReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RankReq::descriptor() {
  ::protobuf_GameSpec_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_GameSpec_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RankReq& RankReq::default_instance() {
  ::protobuf_GameSpec_2eproto::InitDefaultsRankReq();
  return *internal_default_instance();
}

RankReq* RankReq::New(::google::protobuf::Arena* arena) const {
  RankReq* n = new RankReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RankReq::Clear() {
// @@protoc_insertion_point(message_clear_start:GameSpec.RankReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&start_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_) -
      reinterpret_cast<char*>(&start_)) + sizeof(end_));
  _internal_metadata_.Clear();
}

bool RankReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameSpec.RankReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 start = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &start_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 end = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &end_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameSpec.RankReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameSpec.RankReq)
  return false;
#undef DO_
}

void RankReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameSpec.RankReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 start = 1;
  if (this->start() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->start(), output);
  }

  // int32 end = 2;
  if (this->end() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->end(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:GameSpec.RankReq)
}

::google::protobuf::uint8* RankReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameSpec.RankReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 start = 1;
  if (this->start() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->start(), target);
  }

  // int32 end = 2;
  if (this->end() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->end(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameSpec.RankReq)
  return target;
}

size_t RankReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameSpec.RankReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 start = 1;
  if (this->start() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->start());
  }

  // int32 end = 2;
  if (this->end() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->end());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RankReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameSpec.RankReq)
  GOOGLE_DCHECK_NE(&from, this);
  const RankReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RankReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameSpec.RankReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameSpec.RankReq)
    MergeFrom(*source);
  }
}

void RankReq::MergeFrom(const RankReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameSpec.RankReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.start() != 0) {
    set_start(from.start());
  }
  if (from.end() != 0) {
    set_end(from.end());
  }
}

void RankReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameSpec.RankReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RankReq::CopyFrom(const RankReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameSpec.RankReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RankReq::IsInitialized() const {
  return true;
}

void RankReq::Swap(RankReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RankReq::InternalSwap(RankReq* other) {
  using std::swap;
  swap(start_, other->start_);
  swap(end_, other->end_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RankReq::GetMetadata() const {
  protobuf_GameSpec_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_GameSpec_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RankRsp::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RankRsp::kErrCodeFieldNumber;
const int RankRsp::kNameFieldNumber;
const int RankRsp::kExpFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RankRsp::RankRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_GameSpec_2eproto::InitDefaultsRankRsp();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameSpec.RankRsp)
}
RankRsp::RankRsp(const RankRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      name_(from.name_),
      exp_(from.exp_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  errcode_ = from.errcode_;
  // @@protoc_insertion_point(copy_constructor:GameSpec.RankRsp)
}

void RankRsp::SharedCtor() {
  errcode_ = 0;
  _cached_size_ = 0;
}

RankRsp::~RankRsp() {
  // @@protoc_insertion_point(destructor:GameSpec.RankRsp)
  SharedDtor();
}

void RankRsp::SharedDtor() {
}

void RankRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RankRsp::descriptor() {
  ::protobuf_GameSpec_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_GameSpec_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RankRsp& RankRsp::default_instance() {
  ::protobuf_GameSpec_2eproto::InitDefaultsRankRsp();
  return *internal_default_instance();
}

RankRsp* RankRsp::New(::google::protobuf::Arena* arena) const {
  RankRsp* n = new RankRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RankRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:GameSpec.RankRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.Clear();
  exp_.Clear();
  errcode_ = 0;
  _internal_metadata_.Clear();
}

bool RankRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameSpec.RankRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .GameSpec.ErrorCode errCode = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_errcode(static_cast< ::GameSpec::ErrorCode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name(this->name_size() - 1).data(),
            static_cast<int>(this->name(this->name_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "GameSpec.RankRsp.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 exp = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_exp())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 26u, input, this->mutable_exp())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameSpec.RankRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameSpec.RankRsp)
  return false;
#undef DO_
}

void RankRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameSpec.RankRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .GameSpec.ErrorCode errCode = 1;
  if (this->errcode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->errcode(), output);
  }

  // repeated string name = 2;
  for (int i = 0, n = this->name_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name(i).data(), static_cast<int>(this->name(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "GameSpec.RankRsp.name");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(i), output);
  }

  // repeated int32 exp = 3;
  if (this->exp_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _exp_cached_byte_size_));
  }
  for (int i = 0, n = this->exp_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->exp(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:GameSpec.RankRsp)
}

::google::protobuf::uint8* RankRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameSpec.RankRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .GameSpec.ErrorCode errCode = 1;
  if (this->errcode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->errcode(), target);
  }

  // repeated string name = 2;
  for (int i = 0, n = this->name_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name(i).data(), static_cast<int>(this->name(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "GameSpec.RankRsp.name");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->name(i), target);
  }

  // repeated int32 exp = 3;
  if (this->exp_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _exp_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->exp_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameSpec.RankRsp)
  return target;
}

size_t RankRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameSpec.RankRsp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string name = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->name_size());
  for (int i = 0, n = this->name_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->name(i));
  }

  // repeated int32 exp = 3;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->exp_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _exp_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // .GameSpec.ErrorCode errCode = 1;
  if (this->errcode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->errcode());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RankRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameSpec.RankRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const RankRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RankRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameSpec.RankRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameSpec.RankRsp)
    MergeFrom(*source);
  }
}

void RankRsp::MergeFrom(const RankRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameSpec.RankRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  name_.MergeFrom(from.name_);
  exp_.MergeFrom(from.exp_);
  if (from.errcode() != 0) {
    set_errcode(from.errcode());
  }
}

void RankRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameSpec.RankRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RankRsp::CopyFrom(const RankRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameSpec.RankRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RankRsp::IsInitialized() const {
  return true;
}

void RankRsp::Swap(RankRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RankRsp::InternalSwap(RankRsp* other) {
  using std::swap;
  name_.InternalSwap(&other->name_);
  exp_.InternalSwap(&other->exp_);
  swap(errcode_, other->errcode_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RankRsp::GetMetadata() const {
  protobuf_GameSpec_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_GameSpec_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace GameSpec

// @@protoc_insertion_point(global_scope)
